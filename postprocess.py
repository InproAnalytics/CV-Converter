
import re

# ============================================================
# üîç –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
# ============================================================

def unify_languages(langs, original_text=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫–∏ –∏ —É—Ä–æ–≤–Ω–∏ —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ CV.
    –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —É—Ä–æ–≤–Ω–∏ (B2 ‚Üí Fluent), –Ω–µ —É–≥–∞–¥—ã–≤–∞–µ—Ç.
    –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç 'Unspecified'.
    """
    normalized = []

    # 1Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ GPT –≤–µ—Ä–Ω—É–ª
    for entry in langs:
        if isinstance(entry, str):
            entry = {"language": entry, "level": ""}
        if not isinstance(entry, dict):
            continue

        lang = entry.get("language", "").strip().capitalize()
        level = entry.get("level", "").strip()

        if not level:
            level = "Unspecified"

        if lang:
            normalized.append({"language": lang, "level": level})

    # 2Ô∏è‚É£ –ï—Å–ª–∏ GPT –Ω–µ –≤–µ—Ä–Ω—É–ª —è–∑—ã–∫–æ–≤ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Ä—É—á–Ω—É—é
    if not normalized and original_text:
        text = original_text.lower()
        known_langs = [
            "english", "german", "french", "spanish", "italian",
            "russian", "polish", "czech", "portuguese", "chinese",
            "japanese", "korean", "dutch", "turkish", "swedish"
        ]

        for lang in known_langs:
            if re.search(rf"\b{lang}\b", text):
                snippet = text[max(0, text.find(lang) - 40): text.find(lang) + 60]
                match = re.search(r"\b([ABC][12]\+?|native|fluent|intermediate|upper|basic|beginner)\b", snippet, re.I)
                level = match.group(1).upper() if match else "Unspecified"
                normalized.append({"language": lang.capitalize(), "level": level})

    # 3Ô∏è‚É£ –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    seen = set()
    unique = []
    for item in normalized:
        key = item["language"].lower()
        if key not in seen:
            unique.append(item)
            seen.add(key)

    return unique


# ============================================================
# 2Ô∏è‚É£ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç –≤ –æ–ø—ã—Ç–µ
# ============================================================
import re
from datetime import datetime

def unify_durations(projects):
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É:
    "Jul 2019 ‚Äì Oct 2023" –∏–ª–∏ "Jan 2021 ‚Äì Present".
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - 07.19 ‚Äì 10.23
    - 09/2020 ‚Äì 04/2024
    - Mar 2020 ‚Äì Present
    - 2020 ‚Äì 2023
    - 07.2021 ‚Äì
    """
    months = {
        "01": "Jan", "1": "Jan",
        "02": "Feb", "2": "Feb",
        "03": "Mar", "3": "Mar",
        "04": "Apr", "4": "Apr",
        "05": "May", "5": "May",
        "06": "Jun", "6": "Jun",
        "07": "Jul", "7": "Jul",
        "08": "Aug", "8": "Aug",
        "09": "Sep", "9": "Sep",
        "10": "Oct", "11": "Nov", "12": "Dec",
    }

    for project in projects:
        duration = project.get("duration", "")
        if not duration:
            continue

        original = duration.strip()

        # 1Ô∏è‚É£ –ü—Ä–∏–≤–æ–¥–∏–º –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
        duration = re.sub(r"[‚Äì‚Äî‚àí]+", "-", duration)
        duration = re.sub(r"\s*-\s*", " - ", duration)

        # 2Ô∏è‚É£ –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        duration = re.sub(r"(?i)\b(Jetzt|Heute|Aktuell|Now)\b", "Present", duration)
        duration = re.sub(r"(?i)\b(Gegenw√§rtig|Momentan|Derzeit)\b", "Present", duration)

        # 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–æ–¥–µ "07.21 - 10.23"
        m = re.match(r"^\s*(\d{1,2})[./-](\d{2,4})\s*-\s*(\d{1,2})[./-](\d{2,4}|Present)\s*$", duration)
        if m:
            start_m, start_y, end_m, end_y = m.groups()
            start_y = _normalize_year(start_y)
            end_y = "Present" if "Present" in end_y else _normalize_year(end_y)
            start = f"{months.get(start_m.zfill(2), 'Jan')} {start_y}"
            end = f"{months.get(end_m.zfill(2), 'Jan')} {end_y}"
            project["duration"] = f"{start} ‚Äì {end}"
            continue

        # 4Ô∏è‚É£ –§–æ—Ä–º–∞—Ç—ã "07.21 ‚Äì" –∏–ª–∏ "07.2021 ‚Äì"
        m = re.match(r"^\s*(\d{1,2})[./-](\d{2,4})\s*-\s*$", duration)
        if m:
            start_m, start_y = m.groups()
            start_y = _normalize_year(start_y)
            start = f"{months.get(start_m.zfill(2), 'Jan')} {start_y}"
            project["duration"] = f"{start} ‚Äì Present"
            continue

        # 5Ô∏è‚É£ –§–æ—Ä–º–∞—Ç—ã "2019 - 2023" –∏–ª–∏ "2020 - Present"
        m = re.match(r"^\s*(19|20)\d{2}\s*-\s*(?:19|20)?\d{2}|Present\s*$", duration)
        if m:
            duration = duration.replace("-", "‚Äì")
            project["duration"] = duration
            continue

        # 6Ô∏è‚É£ –§–æ—Ä–º–∞—Ç—ã "Mar 2020 - Oct 2023"
        m = re.match(
            r"(?i)^\s*(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{4}\s*-\s*(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)?[a-z]*\s*(?:\d{4}|Present)",
            duration,
        )
        if m:
            duration = re.sub(r"-", "‚Äì", duration)
            project["duration"] = duration.strip()
            continue

        # 7Ô∏è‚É£ –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ overview
        if not project.get("duration"):
            overview = project.get("overview", "")
            match = re.search(r"(\b\d{4}\b).*(\b\d{4}\b|Present)", overview)
            if match:
                project["duration"] = f"{match.group(1)} ‚Äì {match.group(2)}"
            else:
                project["duration"] = original.strip()

    return projects


def _normalize_year(y):
    """–ü–æ–º–æ–≥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 2- –∏ 4-–∑–Ω–∞—á–Ω—ã–µ –≥–æ–¥–∞."""
    y = y.strip()
    if len(y) == 2:
        # –µ—Å–ª–∏ 19‚Äì23 ‚Üí —ç—Ç–æ 2019‚Äì2023
        return f"20{y}"
    return y



# ============================================================
# 3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ hard_skills
# ============================================================
def clean_duplicates_in_skills(skills):
    """
    –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ hard_skills,
    —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∏–º–µ–Ω–∞ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
    """
    if not isinstance(skills, dict):
        return {}

    cleaned = {}
    for cat, arr in skills.items():
        if not isinstance(arr, list):
            continue

        seen = set()
        unique = []
        for item in arr:
            if isinstance(item, dict):
                name = item.get("name", "").strip().lower()
            else:
                name = str(item).strip().lower()

            if name and name not in seen:
                unique.append(item)
                seen.add(name)

        cleaned[cat] = unique

    return cleaned
