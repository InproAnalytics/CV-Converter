import re
from tech_mapping import TECH_MAPPING


# ============================================================
# 1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Hard Skills
# ============================================================
def remap_hard_skills(hard_skills_from_gpt):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É hard_skills:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (dict –∏–ª–∏ str)
    - –ü—Ä–∏–≤–æ–¥–∏—Ç –∏–º–µ–Ω–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ TECH_MAPPING
    - –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
    - –†–∞—Å—à–∏—Ä—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ GPT –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–µ
    """

    # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    mapped_skills = {
        "cloud_platforms": [],
        "devops_iac": [],
        "ci_cd_tools": [],
        "containers_orchestration": [],
        "programming_languages": [],
        "databases": [],
        "backend": [],
        "frontend": [],
        "data_engineering": [],
        "etl_tools": [],
        "bi_tools": [],
        "analytics": [],
        "monitoring_security": [],
        "security": [],
        "ai_ml_tools": [],
        "infrastructure_os": [],
        "other_tools": [],
    }

    # –ï—Å–ª–∏ GPT –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –Ω–µ dict ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if not isinstance(hard_skills_from_gpt, dict):
        return mapped_skills

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º
    for category, tools in hard_skills_from_gpt.items():
        if not isinstance(tools, list):
            continue

        for item in tools:
            if isinstance(item, dict):
                name = item.get("name", "").strip()
                years = item.get("years_experience", 0)
            else:
                name = str(item).strip()
                years = 0

            if not name:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TECH_MAPPING
            matched_category = None
            for pattern, mapped_category in TECH_MAPPING.items():
                if re.search(pattern, name.lower()):
                    matched_category = mapped_category
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ ‚Äî –ø–æ–º–µ—â–∞–µ–º –≤ "other_tools"
            target_cat = matched_category or "other_tools"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            mapped_skills.setdefault(target_cat, []).append({
                "name": name,
                "years_experience": years
            })

    # ============================================================
    # 2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    # ============================================================
    for cat, tools in mapped_skills.items():
        seen = set()
        unique_tools = []
        for tool in tools:
            key = tool["name"].strip().lower().replace(" ", "")
            if key not in seen:
                seen.add(key)
                unique_tools.append(tool)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        mapped_skills[cat] = sorted(unique_tools, key=lambda x: x["name"].lower())

    return mapped_skills


# ============================================================
# üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫
# ============================================================
if __name__ == "__main__":
    import json

    # –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞
    test_data = {
        "cloud_platforms": ["AWS", "Azure", "Google Cloud"],
        "ci_cd_tools": ["Jenkins", "GitLab", "Azure DevOps"],
        "programming_languages": ["Python", "C++", "JavaScript"],
        "misc": ["Nginx", "Linux"]
    }

    remapped = remap_hard_skills(test_data)
    print(json.dumps(remapped, indent=2, ensure_ascii=False))
