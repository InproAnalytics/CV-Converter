from copy import deepcopy

# ============================================================
# 1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å—Ö–µ–º—ã CV
# ============================================================
CV_SCHEMA_TEMPLATE = {
    "full_name": "",
    "title": "",
    "education": "",
    "languages": [],
    "domains": [],
    "profile_summary": "",
    "hard_skills": {
        "programming_languages": [],
        "backend": [],
        "frontend": [],
        "databases": [],
        "data_engineering": [],
        "etl_tools": [],
        "bi_tools": [],
        "analytics": [],
        "cloud_platforms": [],
        "devops_iac": [],
        "ci_cd_tools": [],
        "containers_orchestration": [],
        "monitoring_security": [],
        "security": [],
        "ai_ml_tools": [],
        "infrastructure_os": [],
        "other_tools": [],
    },
    "projects_experience": [],
    "skills_overview": [],
    "website": "",
}


# ============================================================
# 2Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
# ============================================================
def validate_schema(data: dict) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ JSON –±–∞–∑–æ–≤–æ–π —Å—Ö–µ–º–µ.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è.
    –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    if not isinstance(data, dict):
        return deepcopy(CV_SCHEMA_TEMPLATE)

    validated = deepcopy(CV_SCHEMA_TEMPLATE)

    for key, default_value in CV_SCHEMA_TEMPLATE.items():
        if key not in data:
            validated[key] = default_value
        else:
            value = data[key]
            if isinstance(default_value, dict) and isinstance(value, dict):
                # –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö dict
                nested = deepcopy(default_value)
                nested.update(value)
                validated[key] = nested
            else:
                validated[key] = value

    # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —à–∞–±–ª–æ–Ω–µ
    for extra_key, extra_val in data.items():
        if extra_key not in validated:
            validated[extra_key] = extra_val

    return validated


# ============================================================
# üîç –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
# ============================================================
if __name__ == "__main__":
    import json

    example = {
        "full_name": "Manuel Wolfsgruber",
        "hard_skills": {"cloud_platforms": [{"name": "AWS"}]},
        "languages": [{"language": "English", "level": "Fluent"}],
    }

    result = validate_schema(example)
    print(json.dumps(result, indent=2, ensure_ascii=False))
