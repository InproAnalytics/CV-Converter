import json
from utils import has_empty_fields
from chatgpt_client import ask_chatgpt


# ============================================================
# 1Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ GPT
# ============================================================
def auto_fill_with_gpt(data: dict) -> dict:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π.
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–≤—è–∑–∫–µ —Å chatgpt_client.ask_chatgpt(mode="fix").
    """
    try:
        filled = ask_chatgpt(data, mode="fix")
        if isinstance(filled, dict):
            return filled
        return data
    except Exception:
        # fallback –Ω–∞ —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        return fill_missing_fields(data)


# ============================================================
# 2Ô∏è‚É£ –õ–æ–∫–∞–ª—å–Ω—ã–π (fallback) —Ä–µ–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
# ============================================================
def fill_missing_fields(data, prefix=""):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ JSON –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback, –µ—Å–ª–∏ GPT –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.
    """
    if isinstance(data, dict):
        for key, value in data.items():
            full_key = f"{prefix}{key}"
            if isinstance(value, str) and value.strip() == "":
                data[key] = _default_value_for_key(key)
            elif isinstance(value, list):
                if not value:
                    data[key] = []
                else:
                    for i, item in enumerate(value):
                        fill_missing_fields(item, prefix=f"{full_key}[{i}].")
            elif isinstance(value, dict):
                fill_missing_fields(value, prefix=f"{full_key}.")
    return data


# ============================================================
# 3Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# ============================================================
def _default_value_for_key(key: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏.
    """
    key_lower = key.lower()
    if "name" in key_lower:
        return "Unknown"
    if "title" in key_lower:
        return "Specialist"
    if "education" in key_lower:
        return "Not specified"
    if "language" in key_lower:
        return []
    if "domain" in key_lower:
        return []
    if "summary" in key_lower:
        return "No profile summary available."
    if "skills" in key_lower:
        return {}
    if "projects" in key_lower:
        return []
    if "website" in key_lower:
        return ""
    return ""


# ============================================================
# 4Ô∏è‚É£ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
# ============================================================
def fill_cv_data(data: dict) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏—Ö.
    –ï—Å–ª–∏ GPT –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è auto_fill_with_gpt,
    –∏–Ω–∞—á–µ fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.
    """
    if not has_empty_fields(data):
        return data

    try:
        return auto_fill_with_gpt(data)
    except Exception:
        return fill_missing_fields(data)

def fix_project_dates_from_text(projects, original_text):
    """
    –ï—Å–ª–∏ GPT –æ—à–∏–±—Å—è –≤ –≥–æ–¥–∞—Ö, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    for p in projects:
        title = p.get("project_title", "")
        duration = p.get("duration", "")
        if not title:
            continue

        # –ò—â–µ–º —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞—Ç—ã
        pattern = rf"{re.escape(title)}.*?(\b\d{{4}}\b).*?(\b\d{{4}}\b|Present)"
        match = re.search(pattern, original_text, re.I | re.S)
        if match:
            real_dur = f"{match.group(1)} ‚Äì {match.group(2)}"
            if real_dur != duration:
                p["duration"] = real_dur
    return projects

# ============================================================
# üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
# ============================================================
if __name__ == "__main__":
    test_data = {
        "full_name": "Manuel Wolfsgruber",
        "title": "",
        "education": "",
        "languages": [{"language": "", "level": ""}],
        "domains": [],
        "profile_summary": "",
        "hard_skills": {"cloud_platforms": [], "programming_languages": []},
        "projects_experience": [],
        "skills_overview": [],
        "website": ""
    }

    print("Before filling:")
    print(json.dumps(test_data, indent=2, ensure_ascii=False))

    filled = fill_cv_data(test_data)

    print("\nAfter filling:")
    print(json.dumps(filled, indent=2, ensure_ascii=False))
